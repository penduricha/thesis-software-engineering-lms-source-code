INSERT INTO project_thesis_final.bank_test_java_oop (bank_test_java_oop_id, created_at, description_test, image_diagram, name_test, update_at) VALUES (5, '2025-04-20 12:49:07', '<p><strong>Câu 1:</strong> (2.0 điểm, CL04) </p><p>Viết lớp mô tả thông tin của sự kiện (Event) với các thuộc tính:eventCode: Mã sự kiện (phải bắt đầu bằng ký tự \'E\' và theo sau ít nhất 3 ký tự số),eventName: Tên sự kiện, eventDate: Ngày sự kiện, location: Địa điểm tổ chức, participantNumber: Số người tham gia, cost: Chi phí tổ chức.</p><p><strong>Yêu cầu</strong>:</p><p>Viết phương thức getCostPerParticipant() tính chi phí mỗi người tham gia sự kiện, được tính bằng tổng chi phí tổ chức (bao gồm chi phí tổ chức gốc và 10% VAT) chia cho số người tham gia.</p><p>Viết các phương thức setters, getters, constructors và toString() (in dạng cột).</p><p><strong>Ràng buộc toàn vẹn dữ liệu</strong>:</p><p>Mã sự kiện không được thay đổi.</p><p>Phải bắt đầu bằng ký tự \'E\' và theo sau ít nhất 3 ký tự số. Nếu không thoả mãn, trả về null.</p><p>Số người phải lớn hơn 0. Nếu không thoả mãn, trả về 0.</p><p>Giá phải lớn hơn 0. Nếu không thoả mãn, trả về 0.</p><p><strong>Câu 2: (CLO4)</strong></p><p>Viết lớp để quản lý một tập các sự kiện EventList (bắt buộc phải dùng mảng):</p><p><strong>a.</strong> (0.5 điểm) Default constructor, khởi tạo mảng 10 phần tử.</p><p><strong>b.</strong> (2.0 điểm) Phương thức thêm một sự kiện vào tập. Thêm thành công nếu sự kiện cần thêm không rỗng và không trùng (nếu mảng đầy thì tăng kích thước mảng lên 2).</p><p>+ addEvent(Event event): boolean</p><p><strong>c.</strong> (2.0 điểm) Phương thức cập nhật thông tin một sự kiện nào đó (chỉ cho phép cập nhật những sự kiện chưa diễn ra).</p><p>+ updateEvent(Event newInfo): boolean</p><p><strong>d.</strong> (2.0 điểm) Liệt kê danh sách các sự kiện được tổ chức trong một năm nào đó mà có số người tham gia đông nhất.</p><p>+ getEventsWithMaxParsInYear(year: int): Event[]</p><p><strong>Câu 3: (1.5 điểm, CLO5)</strong></p><p>Viết lớp EventTest với phương thức main để kiểm tra các chức năng ở câu 2:</p><p><strong>a.</strong> Tạo danh sách gồm 5 sự kiện với dữ liệu hợp lệ.</p><p><strong>b.</strong> Kiểm thử các chức năng ở câu 2 (không yêu cầu tạo menu case).</p><p>Một phần mẫu thử: (hình ảnh giúp minh họa form kết quả sau khi xuất ra)</p>', 'https://i.ibb.co/0vq8yMB/diagram-1.png', '1-Event', null);
INSERT INTO project_thesis_final.bank_test_java_oop (bank_test_java_oop_id, created_at, description_test, image_diagram, name_test, update_at) VALUES (6, '2025-04-20 12:52:51', '<p>Một chi nhánh cần quản lý các khách hàng tiêu thụ điện. Thông tin cần quản lý gồm:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Mã khách hàng (customerId)</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Họ tên khách hàng (customerName)</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Số kw điện tiêu thụ (kWh)</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Địa chỉ (address)</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Số điện thoại (phoneNumber)</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Tháng tiêu thụ (month)</li></ol><p>Ngoài việc sử dụng thiết bị tiết kiệm điện, tính tiền điện sinh hoạt cũng là mối quan tâm hàng đầu. Chi nhánh yêu cầu một ứng dụng với các chức năng sau:</p><p><br></p><p><br></p><p><strong>Câu 1: (2.5 điểm)</strong></p><p><strong>Yêu cầu</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Xây dựng lớp Customer (khách hàng) với các thuộc tính sau:</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>customerId: Mã khách hàng.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>customerName: Họ tên khách hàng.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>kWh: Số kw điện tiêu thụ.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>address: Địa chỉ.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>phoneNumber: Số điện thoại.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>month: Tháng tiêu thụ.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Cần thiết lập các phương thức set/get để đưa thông tin vào đối tượng. Nếu mã khách hàng (customerId) là rỗng, cần ném lỗi ra ngoài.</li></ol><p><strong>Câu 2: (1.5 điểm)</strong></p><p><strong>Yêu cầu</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Xây dựng phương thức tính tiền điện theo nguyên tắc sau:</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>a)</strong> Nếu sử dụng điện trong khoảng định mức (100kw đầu tiên), tiền điện = tổng số kw * 1200.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>b)</strong> Nếu sử dụng điện vượt ngoài định mức (trên 100kw), tiền điện = tiền trong định mức (100kw) + (số kw vượt mức - 100) * 1700.</li></ol><p><strong>Câu 3: (4 điểm)</strong></p><p><strong>Yêu cầu</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>Lớp CustomerList</strong> chứa danh sách khách hàng với các phương thức:</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>a)</strong> Thêm khách hàng vào danh sách. Nếu trùng mã khách hàng, ném lỗi và không thêm.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>b)</strong> Tìm kiếm khách hàng theo mã. Trả về đối tượng khách hàng tìm thấy.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>c)</strong> Lấy danh sách các khách hàng có số tiền phải trả &gt; 1 triệu.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span><strong>d)</strong> Sửa thông tin khách hàng khi biết mã (chỉ sửa số điện thoại và địa chỉ).</li></ol><p><strong>Câu 4: (2 điểm)</strong></p><p><strong>Yêu cầu</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Xây dựng lớp chứa phương thức main để kiểm tra các thao tác sau:</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>Tạo cứng 6 khách hàng, trong đó có 3 khách hàng có số tiền phải trả &gt; 1 triệu.</li><li data-list="bullet" class="ql-indent-1"><span class="ql-ui" contenteditable="false"></span>Khi chạy chương trình, các thao tác phải hiển thị thông tin danh sách khách hàng, bao gồm thông tin khách hàng và tiền điện phải trả.</li></ol><p><br></p>', 'https://i.ibb.co/Zp6Xt7Sr/diagram-2.png', '2-Customer', null);
INSERT INTO project_thesis_final.bank_test_java_oop (bank_test_java_oop_id, created_at, description_test, image_diagram, name_test, update_at) VALUES (7, '2025-04-20 13:24:30', '<p><strong>Câu 1: (2.0 điểm, CLO3)</strong></p><p><strong>Yêu cầu</strong>: Viết lớp mô tả thông tin của vé máy bay (FlightTicket) với các thuộc tính:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>flightCode</strong>: Mã chuyến bay (String).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>customerName</strong>: Họ tên khách hàng (String).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>ticketType</strong>: Loại vé (TicketType) với các giá trị ECONOMY_CLASS, BUSINESS_CLASS, FIRST_CLASS.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>from</strong>: Sân bay khởi hành (String).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>to</strong>: Sân bay đến (String).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>startTime</strong>: Ngày giờ khởi hành (LocalDateTime).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>endTime</strong>: Ngày giờ đến (LocalDateTime).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>seat</strong>: Ghế (String).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>price</strong>: Giá vé (double).</li></ol><p><strong>Ràng buộc toàn vẹn dữ liệu</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Loại vé chỉ có 3 loại sau: Hạng phổ thông (Economy Class), hạng thương gia (Business Class), hoặc hạng nhất (First Class).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Giá vé phải &gt;= 0.0.</li></ol><p><strong>Phương thức</strong>:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Các phương thức setters, getters cho các thuộc tính.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Constructor với các tham số để khởi tạo.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Phương thức toString() để in thông tin vé máy bay theo định dạng cột.</li></ol><p><strong>Câu 2: (CLO3)</strong></p><p><strong>Yêu cầu</strong>: Viết lớp để quản lý một tập các vé máy bay (FlightTicketList): </p><p>a. (0.5 điểm) Default constructor, khởi tạo mảng 10 phần tử.</p><p>b. (2.0 điểm) Phương thức thêm một vé máy bay vào tập. Thêm thành công nếu vé cần thêm không rỗng (nếu mảng đầy thì tăng kích thước mảng lên 1.5).</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>addTicket(FlightTicket ticket): boolean</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>c. (2.0 điểm) Liệt kê danh sách các vé máy bay theo loại vé.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>listTicketsByType(TicketType ticketType): FlightTicket[]</li></ol><p><strong>Câu 3: (1.5 điểm, CL04)</strong></p><p><strong>Yêu cầu</strong>: Viết lớp với phương thức main để kiểm tra các chức năng ở câu 2:</p><p>a. Tạo sẵn danh sách gồm 5 vé máy bay với dữ liệu hợp lệ.</p><p>b. Gọi kiểm thử các chức năng ở câu 2 (không yêu cầu tạo menu case).</p>', 'https://i.ibb.co/JFzXqrhW/diagram-3.png', '3-Ticket', null);
INSERT INTO project_thesis_final.bank_test_java_oop (bank_test_java_oop_id, created_at, description_test, image_diagram, name_test, update_at) VALUES (8, '2025-04-20 13:35:29', '<p>Quản lý thông tin ứng viên tham gia tuyển dụng trong một công ty. Các ứng viên có 3 loại là <strong>EXPERIENCE</strong>, <strong>FRESHER</strong>, và <strong>INTERN</strong>. Bạn cần xây dựng hệ thống lớp ứng viên và các phương thức cho phép quản lý thông tin về các ứng viên.</p><p><strong>Câu 1: (2.0 điểm, CLO4)</strong></p><p>Viết lớp mô tả thông tin của ứng viên tham gia tuyển dụng (Candidate) với các thuộc tính:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>id</strong>: Mã số ứng viên duy nhất.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>fullName</strong>: Họ tên ứng viên.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>dateOfBirth</strong>: Ngày sinh ứng viên.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>phone</strong>: Số điện thoại.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>candidateType</strong>: Loại ứng viên (FRESHER, EXPERIENCE, INTERN).</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>major</strong>: Chuyên ngành đào tạo chính.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span><strong>graduationYear</strong>: Năm tốt nghiệp (nếu chưa tốt nghiệp thì giá trị là 0).</li></ol><p>Viết phương thức tính <strong>số năm kinh nghiệm</strong> (getExperienceYears) cho ứng viên:</p><ol><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Nếu loại ứng viên là <strong>EXPERIENCE</strong>, số năm kinh nghiệm = năm hiện tại - năm tốt nghiệp.</li><li data-list="bullet"><span class="ql-ui" contenteditable="false"></span>Ngược lại, số năm kinh nghiệm = 0.</li></ol><p>Viết các phương thức setters, getters, constructors và <strong>toString()</strong> (in dạng cột).</p><p><strong>Câu 2: (CLO4)</strong></p><p>Viết lớp <strong>CandidateList</strong> chứa danh sách các ứng viên với các phương thức:</p><p>a. <strong>(0.5 điểm)</strong> Constructor khởi tạo mảng n phần tử (n phải là số nguyên dương).</p><p>b. <strong>(2.0 điểm)</strong> Phương thức thêm một ứng viên vào tập. Thêm thành công nếu ứng viên cần thêm không rỗng và không trùng mã số với các ứng viên khác (nếu mảng đầy thì tăng kích thước mảng lên 1.75).</p><p>+ addCandidate(Candidate candidate): boolean</p><p>c. <strong>(2.0 điểm)</strong> Phương thức tìm các ứng viên theo loại ứng viên và chuyên ngành đào tạo chính (tìm tương đối, không phân biệt chữ hoa chữ thường).</p><p>+ findCandidates(CandidateType candidateType, String major): Candidate[]</p><p>d. <strong>(2.0 điểm)</strong> Phương thức đếm số lượng ứng viên theo loại ứng viên.</p><p>+ countCandidatesByType(CandidateType candidateType): int</p><p><strong>Câu 3: (1.5 điểm, CLO5)</strong></p><p>Viết lớp <strong>CandidateTest</strong> với phương thức main để kiểm tra các chức năng ở câu 2:</p><p>a. Tạo danh sách gồm 5 ứng viên với dữ liệu hợp lệ. Trong đó, ứng viên đầu tiên trong danh sách chứa thông tin của sinh viên làm bài.</p><p>b. Kiểm thử các chức năng ở câu 2 (không yêu cầu tạo menu case).</p>', 'https://i.ibb.co/6Jbxychg/diagram-4.png', '4-Candidate', '2025-05-07 15:45:28');
INSERT INTO project_thesis_final.bank_test_java_oop (bank_test_java_oop_id, created_at, description_test, image_diagram, name_test, update_at) VALUES (10, '2025-05-19 15:43:14', '<p>Quản lý thông tin nhân viên trong một công ty. Các nhân viên có 3 loại: Full-time, Part-time, and Intern. Bạn cần xây dựng hệ thống lớp nhân viên và các phương thức để quản lý thông tin về các nhân viên.</p><p>Câu 1: (2.0 điểm, CLO4)</p><p>Viết lớp mô tả thông tin của nhân viên (Employee) với các thuộc tính:</p><p>employeeId: Mã số nhân viên.</p><p>fullName: Họ tên nhân viên.</p><p>dateOfBirth: Ngày sinh.</p><p>employeeType: Loại nhân viên (Full-time, Part-time, Intern).</p><p>startDate: Ngày bắt đầu làm việc.</p><p>salary: Mức lương (giả sử lương của Intern là 0).</p><p>Câu 2: (4.0 điểm, CLO4)</p><p>Viết lớp EmployeeList chứa danh sách các nhân viên với các phương thức:</p><p>a. (2.0 điểm) Constructor khởi tạo mảng n phần tử.</p><p>b. (2.0 điểm) Phương thức thêm nhân viên vào tập. Thêm thành công nếu nhân viên cần thêm không rỗng và không trùng mã số với các nhân viên khác.</p><p>addEmployee(Employee employee): boolean</p><p>Câu 3: (2.0 điểm, CLO4)</p><p>Viết phương thức tính tổng lương của các nhân viên theo loại (Full-time hoặc Part-time).</p><p>calculateTotalSalary(EmployeeType employeeType): double</p><p>Câu 4: (2.0 điểm, CLO5)</p><p>Viết lớp EmployeeTest với phương thức main để kiểm tra các chức năng ở câu 2 và 3:</p><p>a. (1.0 điểm) Tạo sẵn danh sách 5 nhân viên với dữ liệu hợp lệ.</p><p>b. (1.0 điểm) Kiểm thử các chức năng ở câu 2 và 3.</p>', 'https://i.ibb.co/fd2QdKCM/image.png', '5-cadidate', '2025-05-19 15:43:38');
